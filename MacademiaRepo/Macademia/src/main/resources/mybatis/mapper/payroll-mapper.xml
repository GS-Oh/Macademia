<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<mapper namespace="payrollMapper">


	<!-- 급여대장 ( 검색 ( 옵션에 따른 작성대상 멤버 리스트 가져오기 ) -->
	<select id="selectPayrollOptionMember" resultType="com.kh.md.payroll.vo.PayrollOptionMemberVo">
			SELECT B.*
			FROM 
			(
			        SELECT A.NO, A.NAME, A.POSITION_NAME ,D.NAME AS DEPT_NAME , R.NAME AS RANK_NAME, D.NO AS DEPT_NO, R.NO AS RANK_NO
			        FROM
			        (
			            SELECT M.NO, M.NAME, P.NAME AS POSITION_NAME, P.RANK_NO, P.DEPT_NO
			            FROM MEMBER M
			            JOIN POSITION P ON M.POSITION_NO = P.NO
			        ) A
			        JOIN DEPT D ON D.NO = A.DEPT_NO
			        JOIN RANK R ON R.NO = A.RANK_NO
			) B
			LEFT OUTER JOIN SALARY_BOOK S ON B.NO = S.TARGET_NO
			WHERE S.PAY IS NULL
			<if test="deptNo != 0">
				AND B.DEPT_NO = #{deptNo}
			</if>
			 
		    <if test="rankNo != 0">
				AND B.RANK_NO = #{rankNo}
		    </if>
		    ORDER BY B.RANK_NAME DESC
	
	</select>




	<!-- 급여대장 - 옵션 검색 -->
	<select id="selectPayrollOption" resultType="com.kh.md.payroll.vo.PayrollVo">
	
		SELECT *
		FROM 
		    (
		    SELECT B.*,K.NAME AS RANK_NAME, T.NAME DEPT_NAME
		    FROM
		        (
		        SELECT A.*, P.NAME AS POSITION, P.RANK_NO, P.DEPT_NO
		        FROM
		            (
		            SELECT Z.*, M.NO, M.NAME, M.EMAIL, M.ADDRESS, M.PHONE, M.PROFILE_NAME, M.BANK_NO, M.ACCOUNT, M.ENROLL_DATE, M.QUIT_YN
		            FROM SALARY_BOOK Z
		            JOIN MEMBER M ON Z.TARGET_NO = M.NO
		            WHERE Z.PAY_DATE = #{payDate}
		            ) A
		        JOIN POSITION P ON A.NO = P.NO
		        WHERE A.QUIT_YN = 'N'
		        ) B
		    JOIN RANK K ON B.RANK_NO = K.NO
		    JOIN DEPT T ON B.DEPT_NO = T.NO
		    ) C
		    
		<if test="deptNo != 0">
			WHERE C.DEPT_NO = #{deptNo}
		</if>
		 
	    <if test="rankNo != 0">
			AND C.RANK_NO = #{rankNo}
	    </if>
	    ORDER BY C.SAL_NO DESC
	</select>


	<!-- 급여대장 - 작성하기 -->
	<insert id="insertSalaryBook">
		INSERT INTO SALARY_BOOK 
		(
		    SAL_NO      	
			,WRITER_NO      	
			,TARGET_NO   	
			,PAY_DATE    	
			,PAY	            
			,ATTENDANCE	    
			,ATTENDANCE_PLUS	
			,TECHNICAL	    
			,SPECIALDUTY	    
			,EMERGENCY	    
			,LUNCH_FEE	    
			,HOLIDAY	        
			,SUBSIDY	        
			,PUBLIC_ACTIVITY	
			,CONTRIBUTION	
			,MUTUAL_FEE	    
			,SAFE_DEPOSIT	
		    ,OTHER	        
		)
		VALUES
		(
			 SEQ_SALARY_BOOK_NO.NEXTVAL
			,#{writerNo}
			,#{targetNo}
			,#{payDate}
			,#{pay}
			<if test="attendance == null">,null</if>
			<if test="attendance != null">,#{attendance}</if>
			
			<if test="attendancePlus == null">,null</if>
			<if test="attendancePlus != null">,#{attendancePlus}</if>
			
			<if test="technical == null">,null</if>
			<if test="technical != null">,#{technical}</if>
			
			<if test="specialduty == null">,null</if>
			<if test="specialduty != null">,#{specialduty}</if>
			
			<if test="emergency == null">,null</if>
			<if test="emergency != null">,#{emergency}</if>
			
			<if test="lunchFee == null">,null</if>
			<if test="lunchFee != null">,#{lunchFee}</if>
			
			<if test="holiday == null">,null</if>
			<if test="holiday != null">,#{holiday}</if>
			
			<if test="subsidy == null">,null</if>
			<if test="subsidy != null">,#{subsidy}</if>
			
			<if test="publicActivity == null">,null</if>
			<if test="publicActivity != null">,#{publicActivity}</if>
			
			<if test="contribution == null">,null</if>
			<if test="contribution != null">,#{contribution}</if>
			
			<if test="mutualFee == null">,null</if>
			<if test="mutualFee != null">,#{mutualFee}</if>
			
			<if test="safeDeposit == null">,null</if>
			<if test="safeDeposit != null">,#{safeDeposit}</if>
			
			<if test="other == null">,null</if>
			<if test="other != null">,#{other}</if>
		
		)
		
	
	</insert>	

	<!-- 급여지급내역 당사자꺼 가져오기 -->
	<select id="selectPayRollList" resultType="com.kh.md.payroll.vo.PayrollVo">
		SELECT *
		FROM 
		    (
		    SELECT B.*,K.NAME AS RANK_NAME, T.NAME DEPT_NAME
		    FROM
		        (
		        SELECT A.*, P.NAME AS POSITION, P.RANK_NO, P.DEPT_NO
		        FROM
		            (
		            SELECT Z.*, M.NO, M.NAME, M.EMAIL, M.ADDRESS, M.PHONE, M.PROFILE_NAME, M.BANK_NO, M.ACCOUNT, M.ENROLL_DATE, M.QUIT_YN
		            FROM SALARY_BOOK Z
		            JOIN MEMBER M ON Z.TARGET_NO = M.NO
		            WHERE Z.PAY_DATE LIKE #{payDate}||'%'
		            AND Z.TARGET_NO = #{targetNo}
		            ) A
		        JOIN POSITION P ON A.NO = P.NO
		        WHERE A.QUIT_YN = 'N'
		        AND	  A.CHECK_STATUS = 'CONFIRM'
		        ) B
		    JOIN RANK K ON B.RANK_NO = K.NO
		    JOIN DEPT T ON B.DEPT_NO = T.NO
		    ) 
	
	</select>


	
	<!-- 지급계좌관리 ( 자동이체 정보 조회 ) -->
	<select id="selectStandingOrderByNo" resultType="com.kh.md.payroll.vo.StandOrderVo">
		SELECT
		     S.ST_NO
		    ,S.NO
		    ,S.MONTH_PAY
		    ,S.BASIC_BONUS
		    ,S.BONUS
		    ,S.ENROLL_DATE
		    ,M.NAME
		    ,K.NAME BANK_NAME
		    ,M.ACCOUNT
		FROM STANDING_ORDER S
		JOIN MEMBER M ON S.NO = M.NO 
		JOIN BANK K ON M.BANK_NO = K.NO
		WHERE S.NO = #{no}
	</select>
	
	
	<!-- 지급계좌관리 ( 자동이체 계좌등록 ) -->
	<insert id="insertStandingOrderByNo">
		INSERT INTO STANDING_ORDER(ST_NO, NO)
		VALUES (SEQ_STANDING_ORDER_NO.NEXTVAL, #{no})
	</insert>
	
	
	<!-- 지급계좌관리 ( 자동이체 신청/취소 ) -->
	<update id="updateStandingOrderPay">
		UPDATE STANDING_ORDER 
		SET
			<if test="name == '월급여' and status == '신청'">MONTH_PAY = 'O', EDIT_DATE = SYSDATE</if>
			<if test="name == '기본상여금' and status == '신청'">BASIC_BONUS = 'O', EDIT_DATE = SYSDATE</if>
			<if test="name == '보너스' and status == '신청'">BONUS = 'O', EDIT_DATE = SYSDATE</if>
		    
		    <if test="name == '월급여' and status == '취소'">MONTH_PAY = 'X', EDIT_DATE = SYSDATE</if>
			<if test="name == '기본상여금' and status == '취소'">BASIC_BONUS = 'X', EDIT_DATE = SYSDATE</if>
			<if test="name == '보너스' and status == '취소'">BONUS = 'X', EDIT_DATE = SYSDATE</if>
	</update>
	
	
	<!-- 변경이력에 등록 -->
	<insert id="insertChangeHistory">
		INSERT INTO SO_CHANGE_HISTORY
		(
			 CH_NO
			,ST_NO
			,NO
			,NAME
			,STATUS
		)	
		VALUES
		(
			 SEQ_SO_CHANGE_HISTORY_NO.NEXTVAL
			,#{stNo}
			,#{no}
			,#{name}
			,#{status}
		)
	
	</insert>
	
	
	<!--  지급 계좌 관리 ( 변경이력가져오기 ) -->
	<select id="selectSoChangeHistory" resultType="com.kh.md.payroll.vo.SoChangeVo">
		
		SELECT 
		     CH_NO
		    ,ST_NO
		    ,NO
		    ,NAME
		    ,STATUS
		    ,CHANGE_DATE
		FROM SO_CHANGE_HISTORY
		WHERE NO = #{no}
		ORDER BY CH_NO DESC
		
	
	</select>
	
	
	<!-- 급여대장 상태변경 -->
	<update id="updateCheckStatus">
	
		UPDATE SALARY_BOOK
			<if test="checkSt == 'CONFIRM'">SET CHECK_STATUS = 'CONFIRM'</if>
		    <if test="checkSt == 'RETURN'">SET CHECK_STATUS = 'RETURN'</if>
		WHERE SAL_NO = #{salNo}
	
	</update>
	
	
	
</mapper>